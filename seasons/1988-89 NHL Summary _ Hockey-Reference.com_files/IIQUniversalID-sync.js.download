(() => { var i = { d: (e, t) => { for (var r in t) i.o(t, r) && !i.o(e, r) && Object.defineProperty(e, r, { enumerable: !0, get: t[r] }) }, o: (e, t) => Object.prototype.hasOwnProperty.call(e, t) }, e = {}, t = (i.d(e, { default: () => u }), { JS: "js", PIXEL: "pixel" }); let s = { brands: 0, mobile: 1, platform: 2, architecture: 3, bitness: 4, model: 5, platformVersion: 6, wow64: 7, fullVersionList: 8 }; let a = { chrome: 2097152, safari: 8e4, opera: 2097152, edge: 2048, firefox: 65536, ie: 2048 }; class r { constructor(e = !0) { this.isSync = e } collect() { return new Promise((e, t) => { e(this.getDeviceInfo()) }) } getDeviceInfo() { return { screenWidth: window.screen.width, screenHeight: window.screen.height, devicePixelRatio: window.devicePixelRatio, language: navigator.language } } } class n { constructor(e) { this.allLevels = { FATAL: { value: 10, color: "magenta", secondaryColor: "magenta" }, INFO: { value: 20, color: "green", secondaryColor: "green" }, ERROR: { value: 30, color: "red", secondaryColor: "red" }, DEBUG: { value: 40, color: "cyan", secondaryColor: "grey" }, TRACE: { value: 50, color: "blue", secondaryColor: "blue" } }, e && (this.partnerId = e), this.levelValue = "FATAL" } static getInstance(e) { return new n(e) } getCaller() { var e = (new Error).stack; if (e) { e = e.split("\n"); if (4 <= e.length) { var e = e[3].trim(), t = e.lastIndexOf("("), r = e.lastIndexOf(")"); if (-1 !== t && -1 !== r && t < r) { e = e.substring(t + 1, r).trim().split(" "); if (0 < e.length) return e[0] } } } } log(e, t, r) { this.isLessThanOrEqualTo(e) && this.print(e, t, r) } info(e) { this.log("INFO", e, this.getCaller()) } debug(e) { this.log("DEBUG", e, this.getCaller()) } fatal(e) { this.log("FATAL", e, this.getCaller()) } error(e) { this.log("ERROR", e, this.getCaller()) } trace(e) { this.log("TRACE", e, this.getCaller()) } isLessThanOrEqualTo(e) { return this.allLevels[this.levelValue].value >= this.allLevels[e].value } print(e, t, r) { var i = this.allLevels[e].color, n = this.allLevels[e].secondaryColor; console.log(`${this.partnerId || ""}  %c[${r}] %c[${e}] %c[${Date.now()}] ` + t, "color: white ; background-color:" + i + "; border-radius: 3px", "border:none", "color: " + n + " ; border:1px solid " + i + "; border-radius: 3px") } setLevelValue(e) { "string" == typeof e && (e = e.toUpperCase(), this.allLevels[e]) && (this.levelValue = e) } static clear() { n.instance = void 0 } } class c { static getRandom(e, t) { return Math.floor(Math.random() * (t - e + 1) + e) } static generateRandom1to99() { return Math.floor(99 * Math.random()) + 1 } static isEmpty(e) { return 0 == Object.keys(e).length } static isEmptyObjAndArray(e) { return !e || "object" == typeof e && this.isEmpty(e) } static isDefinedAndNotNullOrEmptyString(e) { return 0 === e || !!e } static isPlainObject(e) { return !("object" != typeof e || Array.isArray(e) || e instanceof Date || e instanceof RegExp) } static isObjectEmpty(e) { return e && 0 === Object.keys(e).length && Object.getPrototypeOf(e) === Object.prototype } static isIpCellular(e) { return e.startsWith("107.77.208.") } static generateNewRandomIp(e) { let t = e ? "107.77.208." : "98.115.221."; return t += Math.floor(255 * Math.random()) } static sleep(t) { return new Promise(e => setTimeout(e, t)) } static encodeQueryString(e) { var t, r = []; for (t in e) r.push(encodeURIComponent(t) + "=" + encodeURIComponent(e[t])); return r.join("&") } static generateGUID() { let t = ""; for (let e = 0; e < 32; e++) { var r = Math.floor(16 * Math.random()); t += r.toString(16) } return t.slice(0, 8) + "-" + t.slice(8, 12) + "-" + t.slice(12, 16) + "-" + t.slice(16, 20) + "-" + t.slice(20, 32) } static tryParseInt(e) { try { return parseInt(e, 10) } catch (e) { n.getInstance().error(e) } return -1 } static tryParse(e) { try { return JSON.parse(e) } catch (e) { n.getInstance().error(e) } return null } static isNonEmptyString(e) { return "string" == typeof e && "" !== e.trim() } static addUniquenessToUrl(e) { return e += "&tsrnd=" + Math.floor(1e3 * Math.random()) + "_" + (new Date).getTime() } static addMetaData(e, t) { return isNaN(t) ? e : e + "&fbp=" + t } static appendPartnersFirstParty(e, t, r, i) { try { if (-1 === t) return e; "" !== r && (e = (e = e + "&pcid=" + r) + "&idtype=" + t) } catch (e) { i.error ? i.error(e) : i(e) } return e } static generateRandomUsIp(e, t) { let r = t.read("_iiq_ip"); return (!r || c.isIpCellular(r) && !e || !c.isIpCellular(r) && e) && (r = c.generateNewRandomIp(e), t.store("_iiq_ip", r)), r } static appendFirstPartyDataToUrl(e, t, r, i, n) { return e = (e = (e = (e = (e += t ? "&ip=" + encodeURIComponent(this.generateRandomUsIp(i, n)) : "") + (r.pid ? "&pid=" + encodeURIComponent(r.pid) : "")) + (r.dbsaved ? "&dbsaved=" + encodeURIComponent(r.dbsaved) : "")) + (r.pcid ? "&iiqidtype=2&iiqpcid=" + encodeURIComponent(r.pcid) : "")) + (r.pcidDate ? "&iiqpciddate=" + encodeURIComponent(r.pcidDate) : "") } static getRefferer(e) { return e || document.referrer || "" } static appendReferrerToUrl(e, t) { t = this.getRefferer(t); return t && (e += "&vrref=" + encodeURIComponent(t)), e } static appendDeviceInfoToUrl(e, t) { var { screenWidth: t, screenHeight: r, devicePixelRatio: i, language: n } = t; return e += `&dw=${t}&dh=${r}&dpr=${i}&lan=` + encodeURIComponent(n) } static appendABTestingData(e, t, r, i) { try { this.isDefinedAndNotNullOrEmptyString(t.isInTestGroup) && (e = e + "&" + r.IS_IN_TEST_GROUP + "=" + t.isInTestGroup), this.isDefinedAndNotNullOrEmptyString(t.currentPercentage) && (e = e + "&" + r.TEST_PERCENTAGE + "=" + t.currentPercentage), this.isDefinedAndNotNullOrEmptyString(t.currentTestGroup) && (e = e + "&" + r.TEST_GROUP + "=" + t.currentTestGroup) } catch (e) { i.error ? i.error(e) : i(e) } return e } static getRequest(e, t, r, i, n) { let a = new XMLHttpRequest; a.open("GET", e, r), e.startsWith("https") && (a.withCredentials = !0), a.timeout = t, a.onreadystatechange = function () { i && 4 === a.readyState && i(a.responseText) }, a.ontimeout = function () { n && n() }, a.send() } static checkIsCookieFullBrowser(e, t) { return "chrome" === e ? (t.info("CookieFull browser detected, setting unified id override logic to: FALSE"), !0) : (t.info("CookieLess browser detected, setting unified id override logic to: TRUE"), !1) } static compareTwoUidsObjects(e, t) { let r = 0; return e.id > t.id && (r = -1), r = e.id < t.id ? 1 : r } static handleGPPData(t = {}) { if (Array.isArray(t)) { let e = {}; for (var r of t) e = Object.assign(e, r); return JSON.stringify(e) } return JSON.stringify(t) } static objectToQueryString(t, r, i) { let n = ""; if (r.additionalParams) if (Array.isArray(r.additionalParams)) for (let e = 0; e < r.additionalParams.length; e++) { var a = r.additionalParams[e]; "object" == typeof a && a.parameterName && a.parameterValue && a.destination && Array.isArray(a.destination) ? a.destination[t] && (n += `&agp_${encodeURIComponent(a.parameterName)}=` + a.parameterValue) : i.error(`Parameter ${JSON.stringify(a)} is not valid`) } else i.error("Provided additionalParams value is incorrect. It should be an array"); return n } static handleAdditionalParams(e, t, r, i, n) { r = this.objectToQueryString(r, i, n); return t.length + r.length > (null != (i = a[e]) ? i : 2048) ? n.error("Additional parameters were not sent due to size limit") : t += r, t } static isLastPartSameCharacter(e) { var e = e.split("-"), t = e[e.length - 1]; if (0 === t.length) return !1; var r = t[0]; for (let e = 1; e < t.length; e++)if (t[e] !== r) return !1; return !0 } } var o = function (e, s, o, l) { return new (o = o || Promise)(function (r, t) { function i(e) { try { a(l.next(e)) } catch (e) { t(e) } } function n(e) { try { a(l.throw(e)) } catch (e) { t(e) } } function a(e) { var t; e.done ? r(e.value) : ((t = e.value) instanceof o ? t : new o(function (e) { e(t) })).then(i, n) } a((l = l.apply(e, s || [])).next()) }) }; let l = t.JS; class d { constructor(e, t, r, i) { this.syncRefreshMillis = 36e5, this.deviceInfo = null, this.intentIqConfig = e, this.pixelURLParams = t, this.storage = i, this.logger = { error: e => { r.error ? r.error(e) : r(e) }, info: e => { r.info ? r.info(e) : r(e) } }, this.intentIqConfig.shouldCollectDeviceInfo && window && this.collectDeviceInfo() } createPixelUrl(e, t, r) { var { isDebug: i, firstPartyData: n, isCellular: a, version: s, useAdditionalParams: o } = this.pixelURLParams; let l = this.intentIqConfig.iiqPixelServerAddress + "/profiles_engine/ProfilesEngineServlet?at=20&mi=10&secure=1"; return l += "&dpi=" + this.intentIqConfig.partner, l = c.appendFirstPartyDataToUrl(l, i, n, a, this.storage), l = c.addUniquenessToUrl(l), l = c.addMetaData(l, this.intentIqConfig.sourceMetaDataExternal || this.intentIqConfig.sourceMetaData), l = c.appendPartnersFirstParty(l, this.intentIqConfig.partnerClientIdType, this.intentIqConfig.partnerClientId, this.logger), l = c.appendReferrerToUrl(l, this.intentIqConfig.domainName), l += s ? "&jsver=" + encodeURIComponent(s) : "", this.deviceInfo && (l = c.appendDeviceInfoToUrl(l, this.deviceInfo)), o && (l = c.appendABTestingData(l, this.intentIqConfig.abTesting, this.intentIqConfig.urlParamsNames, this.logger)), e && (l += "&uh=" + encodeURIComponent(e)), t && (l += "&gdpr_consent=" + encodeURIComponent(t)), r && (l += "&us_privacy=" + encodeURIComponent(r)), l += "&gdpr=" + (t ? "1" : "0"), l = c.handleAdditionalParams(this.pixelURLParams.browser, l, 0, this.intentIqConfig, this.logger) } appendImage(t, r) { try { if (c.isDefinedAndNotNullOrEmptyString(t)) { let e = document.createElement("img"); e.src = t, e.width = 1, e.height = 1, e.style = "display: none !important;", e.alt = "iiq_pixel", c.isDefinedAndNotNullOrEmptyString(document.body) ? document.body.appendChild(e) : window.addEventListener("load", function () { document.body.appendChild(e) }) } } catch (e) { r && this.jsSync(t, !1), this.logger.error("Error to add pixel img to body" + e) } } jsSync(t, r) { try { c.getRequest(t, 9999999, this.intentIqConfig.isAsyncServerRequest, e => { this.logger.info("Done jsSync: " + e) }) } catch (e) { this.logger.error("Error jsSync request: " + e), r && this.pixelSync(t, !1) } } pixelSync(e, t) { try { this.appendImage(e, t) } catch (e) { this.logger.error("Error adding pixel to DOM " + e) } } request(e, t, r) { var i; try { var n, a = parseInt(this.storage.read(this.intentIqConfig.lsKeys.LAST_SYNC_KEY) || ""); (!a || Date.now() - a > this.syncRefreshMillis) && (n = this.createPixelUrl(e, t, r), (null == (i = this.intentIqConfig) ? void 0 : i.syncRequestType) === l ? this.jsSync(n, !0) : this.pixelSync(n, !0), this.storage.store(this.intentIqConfig.lsKeys.LAST_SYNC_KEY, Date.now() + "")) } catch (e) { this.logger.error("Error adding pixel to DOM " + e) } } collectDeviceInfo() { return o(this, void 0, void 0, function* () { var e = new r; try { this.deviceInfo = yield e.collect() } catch (e) { console.error("Failed to get device info:", e) } }) } } let { JS: h, PIXEL: g } = t; class u { constructor(e) { !c.isPlainObject(e) || c.isObjectEmpty(e) ? this.logger("Configuration object not provided correctly") : "number" != typeof e.partner ? this.logger("Mandatory parameters not provided!") : (this.version = 5.088, this.wasDebugCheck = !1, this.isDebugMode = !1, this.localStorageEnabled = void 0, this.metadataConstant = 256, this.syncRefreshMillis = 432e5, this.clientHints = "", this.currentBrowserLowerCase = class { static detectBrowser() { try { if (navigator.userAgent) return this.detectBrowserFromUserAgent(navigator.userAgent); if (navigator.userAgentData) return this.detectBrowserFromUserAgentData(navigator.userAgentData) } catch (e) { console.error("Error detecting browser:", e) } return "unknown" } static detectBrowserFromUserAgent(e) { var t, r = { opera: /Opera|OPR/, edge: /Edg/, chrome: /Chrome|CriOS/, safari: /Safari/, firefox: /Firefox/, ie: /MSIE|Trident/ }; if (r.chrome.test(e)) return "chrome"; if (r.safari.test(e) && !r.chrome.test(e)) return "safari"; for (t of Object.keys(r)) if (r[t].test(e)) return t; return "unknown" } static detectBrowserFromUserAgentData(e) { e = e.brands.map(e => e.brand); return e.includes("Microsoft Edge") ? "edge" : e.includes("Opera") ? "opera" : e.some(e => "Chromium" === e || "Google Chrome" === e) ? "chrome" : "unknown" } }.detectBrowser(), this.intentIqConfig = { partner: e ? e.partner : null, iiqPixelServerAddress: e && "string" == typeof e.iiqPixelServerAddress ? e.iiqPixelServerAddress : "https://sync.intentiq.com", sourceMetaData: e && "string" == typeof e.sourceMetaData ? this.translateMetadata(e.sourceMetaData) : this.translateMetadata(""), partnerClientId: e && "string" == typeof e.partnerClientId ? e.partnerClientId : "", partnerClientIdType: e && "number" == typeof e.partnerClientIdType ? this.verifyIdType(e.partnerClientIdType) : -1, domainName: e && "string" == typeof e.domainName ? e.domainName : "", syncRequestType: e.syncRequestType === h ? h : g, analytics: { profile: "" }, shouldCollectDeviceInfo: "boolean" != typeof e.shouldCollectDeviceInfo || e.shouldCollectDeviceInfo }, this.intentIqConfig.lsKeys = { FIRST_PARTY_KEY: "_iiq_fdata", LAST_SYNC_KEY: "_iiq_sync_" + this.intentIqConfig.partner, CLIENT_HINTS_KEY: "_iiq_ch" }, this.storage = { store: this.storeData.bind(this), read: this.readData.bind(this) }, this.firstPartyData = this.loadOrCreateFirstPartyData(), this.syncData = new d(this.intentIqConfig, { version: this.version, isDebug: this.isDebug(), isCellular: !1, firstPartyData: this.firstPartyData, useAdditionalParams: !1, browser: this.currentBrowserLowerCase }, this.logger, this.storage), this.getClientHintsAndSynchronize()) } translateMetadata(e) { try { var t = e.split("."); return ((+t[0] * this.metadataConstant + +t[1]) * this.metadataConstant + +t[2]) * this.metadataConstant + +t[3] } catch (e) { return NaN } } isDebug() { var e, t; return this.wasDebugCheck || (e = "iiqdebug", -1 === (t = window.location.href).indexOf("?" + e + "=true") && -1 === t.indexOf("&" + e + "=") || (this.isDebugMode = !0), this.wasDebugCheck = !0), this.isDebugMode } logger(e) { this.isDebug() && console.log(this.intentIqConfig.partner + "  %c" + e, "color: yellow ; background-color: blue; border-radius: 3px") } verifyIdType(e) { return 0 === e || 1 === e || 3 === e || 4 === e ? e : -1 } tryParse(e) { try { return JSON.parse(e) } catch (e) { this.logger(e) } return null } readData(e) { try { if (this.hasLocalStorage()) return window.localStorage.getItem(e) } catch (e) { this.logger(e) } return null } storeData(e, t) { try { "string" == typeof e && e.startsWith("iiq_fdata") && this.logger("IntentIQ: storing data: key=" + e + " value=" + t), c.isDefinedAndNotNullOrEmptyString(t) && this.hasLocalStorage() && window.localStorage.setItem(e, t) } catch (e) { this.logger(e) } } hasLocalStorage() { if (void 0 !== this.localStorageEnabled) return this.localStorageEnabled; try { return this.localStorageEnabled = !!window.localStorage, this.localStorageEnabled } catch (e) { this.localStorageEnabled = !1, this.logger("Local storage api disabled") } return !1 } loadOrCreateFirstPartyData() { let e = c.tryParse(this.storage.read(this.intentIqConfig.lsKeys.FIRST_PARTY_KEY)); var t; return e && e.pcid ? e.pcidDate || (e.pcidDate = Date.now()) : (t = c.generateGUID(), e = { pcid: t, pcidDate: Date.now() }), c.isLastPartSameCharacter(e.pcid) && (e.pcid = c.generateGUID(), delete e.pid), null != e && e.pid && (this.intentIqConfig.analytics.profile = e.pid), this.storage.store(this.intentIqConfig.lsKeys.FIRST_PARTY_KEY, JSON.stringify(e)), e } handleClientHints(r) { var i, e = {}; for (i in r) if ("" !== r[i]) if (["brands", "fullVersionList"].includes(i)) { let t = ""; for (let e = 0; e < r[i].length; e++) { var n = r[i][e], a = e < r[i].length - 1; t += `"${n.brand}";v="${n.version}"` + (a ? ", " : "") } e[s[i]] = t } else "boolean" == typeof r[i] ? e[s[i]] = "?" + (r[i] ? 1 : 0) : e[s[i]] = `"${r[i]}"`; return Object.keys(e).length ? JSON.stringify(e) : "" } getClientHintsAndSynchronize() { var e; null != navigator && navigator.userAgentData ? navigator.userAgentData.getHighEntropyValues(["brands", "mobile", "bitness", "wow64", "architecture", "model", "platform", "platformVersion", "fullVersionList"]).then(e => { var e = this.handleClientHints(e); this.clientHints = e, this.storage.store(this.intentIqConfig.lsKeys.CLIENT_HINTS_KEY, e), null != (e = this.syncData) && e.request && this.syncData.request(this.clientHints) }) : null != (e = this.syncData) && e.request && this.syncData.request() } } this.IntentIqSyncObject = e.default })();